@version: 3.11
@include "scl.conf"
#
# /etc/syslog-ng/syslog-ng.conf
#

options {
    stats_freq(0);
    flush_lines(0);
    time_reopen(10);
    log_fifo_size(10000);
    chain_hostnames(off);
    use_dns(no);
    use_fqdn(no);
    create_dirs(no);
    keep_hostname(yes);
    perm(0640);
    group("log");
};

# parsers
parser p-pdb-keeto-openssh {
    db-parser(
        file("/etc/syslog-ng/patterndb.d/keeto-sshd.xml"),
        inject-mode(pass-through)
    );
};

# templates
template openssh-connection {
    template("${SSH_EVENT};${SSH_CLIENT_ADDR};${SSH_CLIENT_PORT}");
    template-escape(no);
};

template openssh-publickey-auth {
    template("${SSH_EVENT};${SSH_CLIENT_ADDR};${SSH_CLIENT_PORT};${SSH_USERNAME};${SSH_HASH_ALGO};${SSH_FINGERPRINT}");
    template-escape(no);
};

template keeto-openssh {
    template("$(if ('${.classifier.rule_id}' eq 'openssh-publickey-auth')
        '$(template openssh-publickey-auth)' '$(template openssh-connection)')");
    template-escape(no);
};

# sources
source s-syslog {
    unix-dgram("/dev/log");
};

# destinations
destination d-tcp-keeto-syslog-ng {
    syslog("keeto-syslog-ng", transport("tcp"), port(601), template(keeto-openssh));
};

# filter
filter f-p-pdb-keeto-openssh {
    match("openssh-connect", value(".classifier.rule_id"), type("string")) or
    match("openssh-publickey-auth", value(".classifier.rule_id"), type("string")) or
    match("openssh-disconnect", value(".classifier.rule_id"), type("string"));
};

# log statements
log {
    source(s-syslog);
    parser(p-pdb-keeto-openssh);
    filter(f-p-pdb-keeto-openssh);
    destination(d-tcp-keeto-syslog-ng);
};

